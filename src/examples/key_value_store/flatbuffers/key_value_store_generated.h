// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_KEYVALUESTORE_RAFT_EXAMPLES_KEY_VALUE_STORE_FBS_H_
#define FLATBUFFERS_GENERATED_KEYVALUESTORE_RAFT_EXAMPLES_KEY_VALUE_STORE_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace raft {
namespace examples {
namespace key_value_store {
namespace fbs {

struct put_request;
struct put_requestBuilder;

struct put_response;
struct put_responseBuilder;

struct get_request;
struct get_requestBuilder;

struct get_response;
struct get_responseBuilder;

struct message;
struct messageBuilder;

enum any_message : uint8_t {
  any_message_NONE = 0,
  any_message_put_request = 1,
  any_message_put_response = 2,
  any_message_get_request = 3,
  any_message_get_response = 4,
  any_message_MIN = any_message_NONE,
  any_message_MAX = any_message_get_response
};

inline const any_message (&EnumValuesany_message())[5] {
  static const any_message values[] = {
    any_message_NONE,
    any_message_put_request,
    any_message_put_response,
    any_message_get_request,
    any_message_get_response
  };
  return values;
}

inline const char * const *EnumNamesany_message() {
  static const char * const names[6] = {
    "NONE",
    "put_request",
    "put_response",
    "get_request",
    "get_response",
    nullptr
  };
  return names;
}

inline const char *EnumNameany_message(any_message e) {
  if (::flatbuffers::IsOutRange(e, any_message_NONE, any_message_get_response)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesany_message()[index];
}

template<typename T> struct any_messageTraits {
  static const any_message enum_value = any_message_NONE;
};

template<> struct any_messageTraits<raft::examples::key_value_store::fbs::put_request> {
  static const any_message enum_value = any_message_put_request;
};

template<> struct any_messageTraits<raft::examples::key_value_store::fbs::put_response> {
  static const any_message enum_value = any_message_put_response;
};

template<> struct any_messageTraits<raft::examples::key_value_store::fbs::get_request> {
  static const any_message enum_value = any_message_get_request;
};

template<> struct any_messageTraits<raft::examples::key_value_store::fbs::get_response> {
  static const any_message enum_value = any_message_get_response;
};

bool Verifyany_message(::flatbuffers::Verifier &verifier, const void *obj, any_message type);
bool Verifyany_messageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct put_request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef put_requestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct put_requestBuilder {
  typedef put_request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(put_request::VT_KEY, key);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(put_request::VT_VALUE, value);
  }
  explicit put_requestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<put_request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<put_request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<put_request> Createput_request(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  put_requestBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<put_request> Createput_requestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return raft::examples::key_value_store::fbs::Createput_request(
      _fbb,
      key__,
      value__);
}

struct put_response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef put_responseBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct put_responseBuilder {
  typedef put_response Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit put_responseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<put_response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<put_response>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<put_response> Createput_response(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  put_responseBuilder builder_(_fbb);
  return builder_.Finish();
}

struct get_request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef get_requestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           verifier.EndTable();
  }
};

struct get_requestBuilder {
  typedef get_request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(get_request::VT_KEY, key);
  }
  explicit get_requestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<get_request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<get_request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<get_request> Createget_request(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0) {
  get_requestBuilder builder_(_fbb);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<get_request> Createget_requestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return raft::examples::key_value_store::fbs::Createget_request(
      _fbb,
      key__);
}

struct get_response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef get_responseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct get_responseBuilder {
  typedef get_response Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(get_response::VT_VALUE, value);
  }
  explicit get_responseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<get_response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<get_response>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<get_response> Createget_response(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  get_responseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<get_response> Createget_responseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return raft::examples::key_value_store::fbs::Createget_response(
      _fbb,
      value__);
}

struct message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef messageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INNER_TYPE = 4,
    VT_INNER = 6
  };
  raft::examples::key_value_store::fbs::any_message inner_type() const {
    return static_cast<raft::examples::key_value_store::fbs::any_message>(GetField<uint8_t>(VT_INNER_TYPE, 0));
  }
  const void *inner() const {
    return GetPointer<const void *>(VT_INNER);
  }
  template<typename T> const T *inner_as() const;
  const raft::examples::key_value_store::fbs::put_request *inner_as_put_request() const {
    return inner_type() == raft::examples::key_value_store::fbs::any_message_put_request ? static_cast<const raft::examples::key_value_store::fbs::put_request *>(inner()) : nullptr;
  }
  const raft::examples::key_value_store::fbs::put_response *inner_as_put_response() const {
    return inner_type() == raft::examples::key_value_store::fbs::any_message_put_response ? static_cast<const raft::examples::key_value_store::fbs::put_response *>(inner()) : nullptr;
  }
  const raft::examples::key_value_store::fbs::get_request *inner_as_get_request() const {
    return inner_type() == raft::examples::key_value_store::fbs::any_message_get_request ? static_cast<const raft::examples::key_value_store::fbs::get_request *>(inner()) : nullptr;
  }
  const raft::examples::key_value_store::fbs::get_response *inner_as_get_response() const {
    return inner_type() == raft::examples::key_value_store::fbs::any_message_get_response ? static_cast<const raft::examples::key_value_store::fbs::get_response *>(inner()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_INNER_TYPE, 1) &&
           VerifyOffset(verifier, VT_INNER) &&
           Verifyany_message(verifier, inner(), inner_type()) &&
           verifier.EndTable();
  }
};

template<> inline const raft::examples::key_value_store::fbs::put_request *message::inner_as<raft::examples::key_value_store::fbs::put_request>() const {
  return inner_as_put_request();
}

template<> inline const raft::examples::key_value_store::fbs::put_response *message::inner_as<raft::examples::key_value_store::fbs::put_response>() const {
  return inner_as_put_response();
}

template<> inline const raft::examples::key_value_store::fbs::get_request *message::inner_as<raft::examples::key_value_store::fbs::get_request>() const {
  return inner_as_get_request();
}

template<> inline const raft::examples::key_value_store::fbs::get_response *message::inner_as<raft::examples::key_value_store::fbs::get_response>() const {
  return inner_as_get_response();
}

struct messageBuilder {
  typedef message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_inner_type(raft::examples::key_value_store::fbs::any_message inner_type) {
    fbb_.AddElement<uint8_t>(message::VT_INNER_TYPE, static_cast<uint8_t>(inner_type), 0);
  }
  void add_inner(::flatbuffers::Offset<void> inner) {
    fbb_.AddOffset(message::VT_INNER, inner);
  }
  explicit messageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<message> Createmessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    raft::examples::key_value_store::fbs::any_message inner_type = raft::examples::key_value_store::fbs::any_message_NONE,
    ::flatbuffers::Offset<void> inner = 0) {
  messageBuilder builder_(_fbb);
  builder_.add_inner(inner);
  builder_.add_inner_type(inner_type);
  return builder_.Finish();
}

inline bool Verifyany_message(::flatbuffers::Verifier &verifier, const void *obj, any_message type) {
  switch (type) {
    case any_message_NONE: {
      return true;
    }
    case any_message_put_request: {
      auto ptr = reinterpret_cast<const raft::examples::key_value_store::fbs::put_request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case any_message_put_response: {
      auto ptr = reinterpret_cast<const raft::examples::key_value_store::fbs::put_response *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case any_message_get_request: {
      auto ptr = reinterpret_cast<const raft::examples::key_value_store::fbs::get_request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case any_message_get_response: {
      auto ptr = reinterpret_cast<const raft::examples::key_value_store::fbs::get_response *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool Verifyany_messageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!Verifyany_message(
        verifier,  values->Get(i), types->GetEnum<any_message>(i))) {
      return false;
    }
  }
  return true;
}

inline const raft::examples::key_value_store::fbs::message *Getmessage(const void *buf) {
  return ::flatbuffers::GetRoot<raft::examples::key_value_store::fbs::message>(buf);
}

inline const raft::examples::key_value_store::fbs::message *GetSizePrefixedmessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<raft::examples::key_value_store::fbs::message>(buf);
}

inline bool VerifymessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<raft::examples::key_value_store::fbs::message>(nullptr);
}

inline bool VerifySizePrefixedmessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<raft::examples::key_value_store::fbs::message>(nullptr);
}

inline void FinishmessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<raft::examples::key_value_store::fbs::message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedmessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<raft::examples::key_value_store::fbs::message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace key_value_store
}  // namespace examples
}  // namespace raft

#endif  // FLATBUFFERS_GENERATED_KEYVALUESTORE_RAFT_EXAMPLES_KEY_VALUE_STORE_FBS_H_
